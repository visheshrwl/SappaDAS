Time Complexities:- 

What are Time Complexities?
The Amount of Time taken by an algorithm to run(as a function of length of the input).


Why?????

1-> For Making better Programs
2-> Comparison of algorithm


Algo A -> High Processing -> Slow Machine
Algo B -> Low Processing  -> Fast Machine

Therefore we use time Complexities.

There are 3 ways to show the time complexities->

1) Big O Notations -> Upper Bound
2) Theta Notations -> For Avg-case Complexity
3) Omega Notations -> Lower Bound

Constant Time -> O(1)
Linear Time -> O(n)
Logarithmic Time -> O(logn)
Quadratic Time -> O(n^2)
Cubic Time -> O(n^3)

//


Let's say having a function like 

for(i = 0; i < 10 ; i++){
    cout << "Hello";                -->  O(1)
}

//In the above code as there's no variable in the code or it can be said that it's fixed therefore it's O(1) complexity



//

Let's say having a function like 

for(i = 0; i < n ; i++){
    cout << "Hello";                -->  O(n)
}

//In the above code as n depends on input provided by the user in the code or it can be said that it's variable therefore it's O(n) complexity

Binary Search -> O(logn)

for(......){
    for(.....){
                                --> O(n^2)
    }
}

for(......){
    for(.....){
        for(....){
                                --> O(n^3)
        }
    }
}

Order of Decreasing Complexity


                ^
O(N!)           |
O(2^n)          |
O(N^3)          |
O(N^2)          |
O(NlogN)        |
O(N)            |
O(logN)         |
O(1)            |

Questions!!!!!

f(n) -> 2n^2 + 3n       -> O(n^2)
f(n) -> 4n^4 + 3n^3     -> O(n^4)
f(n) -> N^2 + logN      -> O(N^2)
f(n) -> 12001           -> O(1)
f(n) -> 3n^3 + 2n^2 + 5 -> O(n^3)
f(n) -> n^3/300         -> O(n^3)
f(n) -> 5n^2 + logn     -> O(n^2)
f(n) -> n/4             -> O(n)
f(n) -> n+4/4             -> O(n)


//Question 1
for(...) {
    ...             -> O(n)
}                                 -> O(n+m)
for(...) {
    ...             -> O(m)
}

//
for(..){           -> O(n)
    for(...){      -> O(m)
        ...                        ->O(m X n)
    }
}


//Question 2
int a= 0, b = 0;

for(i = 0; i< N; i++) {
    for(j = 0; j < N; j++){   -> O(n^2)
        a = a + j;
    }                                   -> O(n^2)
}
for(k = 0; k < N; k++){       -> O(n)
    b = b + k;
}



//Question 3
int a =0;
for(i=0; i<N; i++) {
    for(j=N;j>i; j--){
        a = a + i + j;          -> O(n^2)
    }
}
Space Complexities:-